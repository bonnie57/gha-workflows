name: Fetch Network Node IPs

on:
  workflow_call:
    inputs:
      role_to_assume:
        description: "The role to assume"
        required: true
        type: string
      aws_region:
        description: "The AWS region to use"
        required: true
        type: string
      devnet_changed:
        description: "Boolean to check if DevNet files have changed"
        required: true
        type: string
      testnet_changed:
        description: "Boolean to check if TestNet files have changed"
        required: true
        type: string
      network_odyssey_devnet:
        description: "The network name for Odyssey DevNet"
        required: true
        type: string
      network_odyssey_testnet:
        description: "The network name for Odyssey TestNet"
        required: true
        type: string
      aws_regions:
        description: "Comma-separated list of AWS regions"
        required: true
        type: string
    outputs:
      node_ips_odyssey_devnet:
        description: "The IP addresses for DevNet"
        value: ${{ jobs.fetch_network_node_ips.outputs.node_ips_odyssey_devnet }}
      node_ips_odyssey_testnet:
        description: "The IP addresses for TestNet"
        value: ${{ jobs.fetch_network_node_ips.outputs.node_ips_odyssey_testnet }}

jobs:
  fetch_network_node_ips:
    runs-on: ubuntu-latest
    outputs:
      node_ips_odyssey_devnet: ${{ steps.get_all_node_ips.outputs.node_ips_odyssey_devnet }}
      node_ips_odyssey_testnet: ${{ steps.get_all_node_ips.outputs.node_ips_odyssey_testnet }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.role_to_assume }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: github-actions

      - name: Fetch All Network Node IPs, Regions, and SSH Users
        id: get_all_node_ips
        run: |
          DEVNET_CHANGED="${{ inputs.devnet_changed }}"
          TESTNET_CHANGED="${{ inputs.testnet_changed }}"
          NETWORK_ODYSSEY_DEVNET="${{ inputs.network_odyssey_devnet }}"
          NETWORK_ODYSSEY_TESTNET="${{ inputs.network_odyssey_testnet }}"

          # Convert the comma-separated regions into an array
          IFS=',' read -ra regions <<< "${{ inputs.aws_regions }}"

          pwd
          ls -la

          # Make the script executable
          chmod +x scripts/fetch_all_node_ips.sh

          if [ "$DEVNET_CHANGED" = "true" ]; then
            echo "Fetching DevNet Node IPs"
            DEVNET_NODE_IPS=""
            for region in "${regions[@]}"; do
              NODE_INFOS=$(./scripts/fetch_all_node_ips.sh "$NETWORK_ODYSSEY_DEVNET" "$region")
              if [ -n "$NODE_INFOS" ]; then
                # Append node infos to DEVNET_NODE_IPS, separated by semicolons
                while IFS= read -r line; do
                  DEVNET_NODE_IPS+="${line};"
                done <<< "$NODE_INFOS"
              fi
            done
            # Remove trailing semicolon
            DEVNET_NODE_IPS="${DEVNET_NODE_IPS%?}"
            echo "node_ips_odyssey_devnet<<EOF" >> $GITHUB_OUTPUT
            echo "$DEVNET_NODE_IPS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Odyssey DevNet Node IPs: $DEVNET_NODE_IPS"
          else
            echo "DevNet unchanged, skipping Node IP fetch"
          fi

          if [ "$TESTNET_CHANGED" = "true" ]; then
            echo "Fetching TestNet Node IPs"
            TESTNET_NODE_IPS=""
            for region in "${regions[@]}"; do
              NODE_INFOS=$(./scripts/fetch_all_node_ips.sh "$NETWORK_ODYSSEY_TESTNET" "$region")
              if [ -n "$NODE_INFOS" ]; then
                # Append node infos to TESTNET_NODE_IPS, separated by semicolons
                while IFS= read -r line; do
                  TESTNET_NODE_IPS+="${line};"
                done <<< "$NODE_INFOS"
              fi
            done
            # Remove trailing semicolon
            TESTNET_NODE_IPS="${TESTNET_NODE_IPS%?}"
            echo "node_ips_odyssey_testnet<<EOF" >> $GITHUB_OUTPUT
            echo "$TESTNET_NODE_IPS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Odyssey TestNet Node IPs: $TESTNET_NODE_IPS"
          else
            echo "TestNet unchanged, skipping Node IP fetch"
          fi

          # If both are false, output a message
          if [ "$DEVNET_CHANGED" = "false" ] && [ "$TESTNET_CHANGED" = "false" ]; then
            echo "No changes detected for either network, no Node IPs fetched"
          fi

          # Display the fetched Node IPs (if any)
          if [ -n "$DEVNET_NODE_IPS" ]; then
            echo "Odyssey DevNet Node IPs: $DEVNET_NODE_IPS"
          fi
          if [ -n "$TESTNET_NODE_IPS" ]; then
            echo "Odyssey TestNet Node IPs: $TESTNET_NODE_IPS"
          fi
